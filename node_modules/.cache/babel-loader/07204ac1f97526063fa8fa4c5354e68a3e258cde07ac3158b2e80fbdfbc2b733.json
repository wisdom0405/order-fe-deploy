{"ast":null,"code":"import axios from 'axios';\nimport { mapGetters } from 'vuex';\nexport default {\n  props: ['isAdmin', 'pageTitle'],\n  data() {\n    return {\n      searchType: 'optional',\n      searchOptions: [{\n        text: \"선택\",\n        value: 'optional'\n      }, {\n        text: \"상품명\",\n        value: \"name\"\n      }, {\n        text: \"카테고리\",\n        value: \"category\"\n      }],\n      searchValue: \"\",\n      productList: [],\n      pageSize: 5,\n      currentPage: 0,\n      isLastPage: false,\n      isLoading: false,\n      // selected(객체) 예시\n      // {1: true, 2:false, 3:false, 4:true} 이런식으로 담기게 된다.\n      selected: {}\n    };\n  },\n  created() {\n    this.loadProduct();\n    window.addEventListener('scroll', this.scrollPagination); // 화면상에서 스크롤이 감지될 때 scrollPagination 호출\n  },\n  computed: {\n    ...mapGetters(['getCount'])\n  },\n  beforeUnmount() {\n    window.removeEventListener('scroll', this.scrollPagination);\n  },\n  methods: {\n    deleteProduct(productId) {\n      console.log(productId);\n    },\n    searchProducts() {\n      // 검색버튼 누르면 그동안 load했던 데이터들 빈배열로 초기화\n      this.productList = [];\n      this.currentPage = 0;\n      this.isLastPage = false;\n      this.isLoading = false;\n      this.loadProduct();\n    },\n    async loadProduct() {\n      try {\n        // Pageable 객체에 맞게 파라미터 형식으로 데이터를 전송해줘야 함\n        // url에 product/list?size=3&page=0 이런식으로 요청\n        // 방법1. 파라미터 방식 : {params:{page:10, size:2}} 와 같은 형식으로 전송 시 parameter 형식으로 변환되어 서버로 전송\n        // 방법2. body로 formData 객체 생성하여 서버로 데이터 전송 \n        if (this.isLoading || this.isLastPage) return;\n        this.isLoading = true;\n        let params = {\n          size: this.pageSize,\n          page: this.currentPage\n        };\n\n        // params = {size:5. page:0, category : \"fruits\"} 또는 {size:5. page:0, name : \"apple\"}\n        if (this.searchType === 'name') {\n          // params는 .name 하면 name값 추가\n          params.searchName = this.searchValue;\n        } else if (this.searchType === 'category') {\n          params.category = this.searchValue;\n        }\n\n        // localhost:8080/product/list?category=fruits&size=5&page=0 또는 name=apple&size=5&page=0\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/product/list`, {\n          params\n        });\n        const additionalData = response.data.result.content.map(p => ({\n          ...p,\n          quantity: 0\n        }));\n        if (additionalData.length == 0) {\n          this.isLastPage = true;\n          return; // 함수 종료시킴\n        }\n        this.productList = [...this.productList, ...additionalData]; // 두배열을 합치므로써 이전데이터 + 새로 로드된 데이터 불러옴\n        this.currentPage++; // load가 끝나면 currentPage 증가시켜줘야함\n        this.isLoading = false;\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    scrollPagination() {\n      // 화면상에서 스크롤이 동작할때 실행되도록 하는 함수\n      // \"현재화면 + 스크롤로 이동한 화면 >  전체화면 - n\" 의 조건이 성립되면 추가 데이터 로드 \n      const isBottom = window.innerHeight + window.scrollY >= document.body.offsetHeight - 200;\n      if (isBottom && !this.isLastPage && !this.isLoading) {\n        // !this.Loading : 로딩되고 있지 않을 때\n        this.loadProduct();\n      }\n    },\n    addCart() {\n      const orderProducts = Object.keys(this.selected).filter(key => this.selected[key]) // 체크된 key(id)값을 거름\n      .map(key => {\n        const product = this.productList.find(p => p.id == key);\n        return {\n          id: product.id,\n          name: product.name,\n          quantity: product.quantity\n        };\n      });\n      orderProducts.forEach(p => this.$store.dispatch('addCart', p));\n      console.log();\n      // window.location.reload();\n    },\n    async createOrder() {\n      const orderProducts = Object.keys(this.selected).filter(key => this.selected[key]) // 체크된 key(id)값을 거름\n      .map(key => {\n        const product = this.productList.find(p => p.id == key);\n        return {\n          productId: product.id,\n          productCount: product.quantity\n        };\n      });\n      if (orderProducts.length < 1) {\n        alert(\"주문대상 물건이 없습니다.\");\n        return;\n      }\n      const yesOrNo = confirm(`${orderProducts.length}개의 상품을 주문하시겠습니까?`);\n      if (!yesOrNo) {\n        console.log(\"주문이 취소되었습니다.\");\n        return;\n      }\n      try {\n        await axios.post(`${process.env.VUE_APP_API_BASE_URL}/order/create`, orderProducts);\n        alert(\"주문완료되었습니다.\");\n      } catch (e) {\n        alert(\"주문실패되었습니다.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","mapGetters","props","data","searchType","searchOptions","text","value","searchValue","productList","pageSize","currentPage","isLastPage","isLoading","selected","created","loadProduct","window","addEventListener","scrollPagination","computed","beforeUnmount","removeEventListener","methods","deleteProduct","productId","console","log","searchProducts","params","size","page","searchName","category","response","get","process","env","VUE_APP_API_BASE_URL","additionalData","result","content","map","p","quantity","length","e","isBottom","innerHeight","scrollY","document","body","offsetHeight","addCart","orderProducts","Object","keys","filter","key","product","find","id","name","forEach","$store","dispatch","createOrder","productCount","alert","yesOrNo","confirm","post"],"sources":["/Users/wisdom/Documents/GitHub/order-frontend/src/components/ProductListComponent.vue"],"sourcesContent":["<template>\n    <v-container>\n        <v-row class=\"d-flex justify-content-between mt-5\">\n            <v-col>\n                <v-form @submit.prevent=\"searchProducts\">\n                    <v-row>\n                        <v-col cols=\"auto\">\n                            <v-select\n                             v-model=\"searchType\"\n                             :items=\"searchOptions\"\n                             item-title=\"text\"\n                             item-value=\"value\"\n                            >\n                            </v-select>\n                        </v-col>\n\n                        <v-col>\n                            <v-text-field\n                            v-model=\"searchValue\" label=\"Search\"\n                            >\n                            </v-text-field>\n                        </v-col>\n\n                        <v-col cols=\"auto\">\n                            <v-btn type=\"submit\">검색</v-btn>    \n                        </v-col>\n\n                    </v-row>\n                </v-form>\n            </v-col>\n\n            <v-col cols=\"auto\" v-if=\"!isAdmin\">\n                <v-btn @click=\"addCart\" color=\"secondary\" class=\"mr-2\">장바구니</v-btn>\n                <v-btn @click=\"createOrder\" color=\"success\">주문하기</v-btn>\n            </v-col>\n\n            <v-col cols=\"auto\" v-if=\"isAdmin\">\n                <v-btn href=\"/product/create\" color=\"success\">상품등록</v-btn>\n            </v-col>\n        </v-row>\n        <v-row>\n            <v-col>\n                <v-card>\n                    <v-card-title class=\"text-h6 text-center\">{{pageTitle}}</v-card-title>\n                    <v-card-text>\n                        <v-table>\n                            <thead>\n                                <tr>\n                                    <th>제품사진</th>\n                                    <th>제품명</th>\n                                    <th>가격</th>\n                                    <th>재고수량</th>\n                                    <th v-if=\"!isAdmin\">주문수량</th>\n                                    <th v-if=\"!isAdmin\" class=\"text-center\">주문선택</th>\n                                    <th v-if=\"isAdmin\">Action</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr v-for=\"p in productList\" :key=\"p.id\">\n                                    <td>\n                                        <v-img :src=\"p.imagePath\" style=\"height:100px; width:auto;\"></v-img>\n                                    </td>\n                                    <td>{{p.name}}</td>\n                                    <td>{{p.price}}</td>\n                                    <td>{{p.stockQuantity}}</td>\n                                    <td>\n                                        <v-text-field\n                                            v-model.number=\"p.quantity\"\n                                            type=\"number\"\n                                            style=\"width:70px\"\n                                        >\n                                        </v-text-field>\n                                    </td>\n\n                                    <td class=\"text-center\" v-if=\"!isAdmin\">\n                                        <input type=\"checkbox\" v-model=\"selected[p.id]\">\n                                    </td>\n                                    <td v-if=\"isAdmin\">\n                                        <v-btn color=\"secondary\" @click=\"deleteProduct(p.id)\">삭제</v-btn>    \n                                    </td>\n                                </tr>\n                               \n                            </tbody>\n\n                        </v-table>\n                    </v-card-text>\n                </v-card>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { mapGetters } from 'vuex';\nexport default{\n    props: ['isAdmin', 'pageTitle'],\n    data(){\n        return{\n            searchType: 'optional',\n            searchOptions: [\n                {text:\"선택\", value:'optional'},\n                {text:\"상품명\", value: \"name\"},\n                {text:\"카테고리\", value: \"category\"}\n            ],\n            searchValue: \"\",\n            productList:[],\n            pageSize:5,\n            currentPage:0,\n            isLastPage: false,\n            isLoading: false,\n            // selected(객체) 예시\n            // {1: true, 2:false, 3:false, 4:true} 이런식으로 담기게 된다.\n            selected:{}\n\n        }\n    },\n    created(){\n        this.loadProduct();\n        window.addEventListener('scroll', this.scrollPagination); // 화면상에서 스크롤이 감지될 때 scrollPagination 호출\n    },\n    computed: {\n        ...mapGetters(['getCount']),\n    \n    },\n    beforeUnmount(){\n        window.removeEventListener('scroll', this.scrollPagination);\n    },\n    methods:{\n        deleteProduct(productId){\n            console.log(productId);\n        },\n\n        searchProducts(){\n            // 검색버튼 누르면 그동안 load했던 데이터들 빈배열로 초기화\n            this.productList = [];\n            this.currentPage = 0;\n            this.isLastPage = false;\n            this.isLoading = false;\n            this.loadProduct();\n        },\n\n        async loadProduct(){\n            try{\n                // Pageable 객체에 맞게 파라미터 형식으로 데이터를 전송해줘야 함\n                // url에 product/list?size=3&page=0 이런식으로 요청\n                // 방법1. 파라미터 방식 : {params:{page:10, size:2}} 와 같은 형식으로 전송 시 parameter 형식으로 변환되어 서버로 전송\n                // 방법2. body로 formData 객체 생성하여 서버로 데이터 전송 \n                if(this.isLoading || this.isLastPage) return;\n                \n                this.isLoading = true;\n\n                let params = {\n                    size: this.pageSize,\n                    page: this.currentPage\n                }\n\n                // params = {size:5. page:0, category : \"fruits\"} 또는 {size:5. page:0, name : \"apple\"}\n                if(this.searchType === 'name'){\n                    // params는 .name 하면 name값 추가\n                    params.searchName=this.searchValue;\n                }else if(this.searchType === 'category'){\n                    params.category = this.searchValue;\n                }\n                \n                // localhost:8080/product/list?category=fruits&size=5&page=0 또는 name=apple&size=5&page=0\n                const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/product/list`,{params});\n                const additionalData = response.data.result.content.map(p => ({...p, quantity:0}));\n                \n                if(additionalData.length == 0){\n                    this.isLastPage = true;\n                    return; // 함수 종료시킴\n                }\n                this.productList = [...this.productList, ...additionalData]; // 두배열을 합치므로써 이전데이터 + 새로 로드된 데이터 불러옴\n                this.currentPage++; // load가 끝나면 currentPage 증가시켜줘야함\n                this.isLoading = false;\n\n            }catch(e){\n                console.log(e);\n            }\n        },\n        scrollPagination(){\n            // 화면상에서 스크롤이 동작할때 실행되도록 하는 함수\n            // \"현재화면 + 스크롤로 이동한 화면 >  전체화면 - n\" 의 조건이 성립되면 추가 데이터 로드 \n            const isBottom = window.innerHeight + window.scrollY >= document.body.offsetHeight - 200;\n            if(isBottom && !this.isLastPage && !this.isLoading){ // !this.Loading : 로딩되고 있지 않을 때\n                this.loadProduct();\n            }\n        },\n        addCart(){\n            const orderProducts = Object.keys(this.selected).filter(key => this.selected[key]) // 체크된 key(id)값을 거름\n                                .map(key => {\n                                    const product = this.productList.find(p => p.id == key)\n                                    return {id:product.id, name:product.name, quantity:product.quantity};\n                                });\n            orderProducts.forEach(p => this.$store.dispatch('addCart', p));\n            console.log();\n            // window.location.reload();\n        },\n        async createOrder(){\n            const orderProducts = Object.keys(this.selected).filter(key => this.selected[key]) // 체크된 key(id)값을 거름\n                                .map(key => {\n                                    const product = this.productList.find(p => p.id == key)\n                                    return {productId:product.id, productCount:product.quantity};\n                                });\n                                \n            if(orderProducts.length < 1){\n                alert(\"주문대상 물건이 없습니다.\");\n                return;\n            }\n\n            const yesOrNo = confirm(`${orderProducts.length}개의 상품을 주문하시겠습니까?`);\n            \n            if(!yesOrNo){\n                console.log(\"주문이 취소되었습니다.\");\n                return;\n            }\n\n            try{\n                await axios.post(`${process.env.VUE_APP_API_BASE_URL}/order/create`, orderProducts);\n                alert(\"주문완료되었습니다.\");\n            }catch(e){\n                alert(\"주문실패되었습니다.\");\n            }\n            \n        }\n    }\n}\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}