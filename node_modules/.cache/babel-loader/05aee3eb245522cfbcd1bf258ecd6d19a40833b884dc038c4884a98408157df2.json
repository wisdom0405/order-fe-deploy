{"ast":null,"code":"// main.js는 vue 애플리케이션의 시작점\nimport { createApp } from 'vue';\nimport App from './App.vue';\n// src/router/index.js 파일의 router를 사용하겠다는 선언\nimport router from '@/router/index.js'; // index.js의 router 사용 (@쓰면 root기준)\nimport vuetify from './plugins/vuetify'; // . 쓰면 현재 폴더 기준 경로\nimport '@mdi/font/css/materialdesignicons.css';\n// createApp(App).mount('#app') // mount : app.vue파일을 빌드해서 mount\nimport axios from 'axios';\nconst app = createApp(App);\n\n// axios 요청 인터셉터를 설정하여 모든 요청에 액세스 토큰을 포함한다.\naxios.interceptors.request.use(config => {\n  // config가 있으면\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  // 에러가 나면 해당 인터셉터 무시되고, 사용자의 본래요청인 화면으로 라우팅된다.\n  return Promise.reject(error);\n});\n\n// 401응답을 받을 경우에 interceptor를 통해 전역적으로 rt를 통한 at 재발급\n// 만약 rt도 401응답(화면 유효X)을 받을 경우에 token제거 후 login 화면으로 리다이렉트 \n// main.js가 진입점이므로 화면마다 401에러가 터지면 인터셉터로 가져가서 at 재발급\naxios.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    const refreshToken = localStorage.getItem('refreshToken');\n    const response = axios.post(`${VUE_APP_API_BASE_URL}/refresh-token`, {\n      refreshToken\n    }); // {\"refreshToken\" : refreshToken} 이런식으롭 보내는거임\n  }\n});\napp.use(router);\napp.use(vuetify);\napp.mount('#app');","map":{"version":3,"names":["createApp","App","router","vuetify","axios","app","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","status","refreshToken","post","VUE_APP_API_BASE_URL","mount"],"sources":["/Users/wisdom/Documents/GitHub/order-frontend/src/main.js"],"sourcesContent":["// main.js는 vue 애플리케이션의 시작점\nimport { createApp } from 'vue'\nimport App from './App.vue'\n// src/router/index.js 파일의 router를 사용하겠다는 선언\nimport router from '@/router/index.js' // index.js의 router 사용 (@쓰면 root기준)\nimport vuetify from './plugins/vuetify'; // . 쓰면 현재 폴더 기준 경로\nimport '@mdi/font/css/materialdesignicons.css'\n// createApp(App).mount('#app') // mount : app.vue파일을 빌드해서 mount\nimport axios from 'axios';\nconst app = createApp(App);\n\n// axios 요청 인터셉터를 설정하여 모든 요청에 액세스 토큰을 포함한다.\naxios.interceptors.request.use(\n    config =>{ // config가 있으면\n        const token = localStorage.getItem('token'); \n        if(token){\n            config.headers['Authorization'] = `Bearer ${token}`;\n        }\n        return config;\n    },\n    error => {\n        // 에러가 나면 해당 인터셉터 무시되고, 사용자의 본래요청인 화면으로 라우팅된다.\n        return Promise.reject(error);\n    }\n)\n\n// 401응답을 받을 경우에 interceptor를 통해 전역적으로 rt를 통한 at 재발급\n// 만약 rt도 401응답(화면 유효X)을 받을 경우에 token제거 후 login 화면으로 리다이렉트 \n// main.js가 진입점이므로 화면마다 401에러가 터지면 인터셉터로 가져가서 at 재발급\naxios.interceptors.response.use(\n    response => response,\n    error => {\n        if(error.response && error.response.status === 401 ){\n            const refreshToken = localStorage.getItem('refreshToken');\n            const response = axios.post(`${VUE_APP_API_BASE_URL}/refresh-token`, {refreshToken}); // {\"refreshToken\" : refreshToken} 이런식으롭 보내는거임\n            \n        }\n    }\n\n)\napp.use(router);\napp.use(vuetify);\napp.mount('#app');\n"],"mappings":"AAAA;AACA,SAASA,SAAS,QAAQ,KAAK;AAC/B,OAAOC,GAAG,MAAM,WAAW;AAC3B;AACA,OAAOC,MAAM,MAAM,mBAAmB,EAAC;AACvC,OAAOC,OAAO,MAAM,mBAAmB,CAAC,CAAC;AACzC,OAAO,uCAAuC;AAC9C;AACA,OAAOC,KAAK,MAAM,OAAO;AACzB,MAAMC,GAAG,GAAGL,SAAS,CAACC,GAAG,CAAC;;AAE1B;AACAG,KAAK,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAG;EAAE;EACP,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAGF,KAAK,EAAC;IACLD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACvD;EACA,OAAOD,MAAM;AACjB,CAAC,EACDK,KAAK,IAAI;EACL;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA;AACA;AACAV,KAAK,CAACE,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC3BS,QAAQ,IAAIA,QAAQ,EACpBH,KAAK,IAAI;EACL,IAAGA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IAChD,MAAMC,YAAY,GAAGR,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACzD,MAAMK,QAAQ,GAAGb,KAAK,CAACgB,IAAI,CAAC,GAAGC,oBAAoB,gBAAgB,EAAE;MAACF;IAAY,CAAC,CAAC,CAAC,CAAC;EAE1F;AACJ,CAEJ,CAAC;AACDd,GAAG,CAACG,GAAG,CAACN,MAAM,CAAC;AACfG,GAAG,CAACG,GAAG,CAACL,OAAO,CAAC;AAChBE,GAAG,CAACiB,KAAK,CAAC,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}