{"ast":null,"code":"function initState() {\n  return {\n    // count:0,\n    message: \"\"\n  };\n}\nconst practice = {\n  // state : 상태를 의미하는 객체로서 initState를 통해 상태 초기화\n  state: initState,\n  // mutations는 상태를 변경하기 위한 함수들의 집합\n  // mutations는 컴포넌트에서 직접 호출되기 보다는, actions를 통해 mutation이 호출\n  // 그 이유는 여러 mutation를 연속적으로 호출하는 등의 경우가 있을 수 있기 때문\n  mutations: {\n    increment(state) {\n      state.count++;\n    },\n    updateMessage(state, newMessage) {\n      state.message = newMessage;\n    }\n  },\n  actions: {\n    // 아래와 같이 actions의 함수를 통해 mutation의 함수를 호출\n    // 그러면 결국, 컴포넌트에서는 actions의 함수를 호출\n    incrementCount(context) {\n      context.commit('increment');\n    },\n    updateMessage(context, newMessage) {\n      context.commit('updateMessage', newMessage);\n    }\n  },\n  // 상태(변수)를 get하기 위한 함수들의 집합\n  getters: {\n    getCount: state => state.count,\n    getMessage: state => state.message\n  }\n};\nexport default practice;","map":{"version":3,"names":["initState","message","practice","state","mutations","increment","count","updateMessage","newMessage","actions","incrementCount","context","commit","getters","getCount","getMessage"],"sources":["/Users/wisdom/Documents/GitHub/order-frontend/src/store/practice.js"],"sourcesContent":["function initState(){\n    return{\n        // count:0,\n        message:\"\"\n    }\n}\n\nconst practice={\n    // state : 상태를 의미하는 객체로서 initState를 통해 상태 초기화\n    state: initState,\n    // mutations는 상태를 변경하기 위한 함수들의 집합\n    // mutations는 컴포넌트에서 직접 호출되기 보다는, actions를 통해 mutation이 호출\n    // 그 이유는 여러 mutation를 연속적으로 호출하는 등의 경우가 있을 수 있기 때문\n    mutations: {\n        increment(state){\n            state.count++;\n        },\n        updateMessage(state, newMessage){\n            state.message = newMessage;\n        }\n\n    },\n    actions:{\n        // 아래와 같이 actions의 함수를 통해 mutation의 함수를 호출\n        // 그러면 결국, 컴포넌트에서는 actions의 함수를 호출\n        incrementCount(context){\n            context.commit('increment');\n        },\n        updateMessage(context, newMessage){\n            context.commit('updateMessage', newMessage);\n        }\n    },\n    // 상태(변수)를 get하기 위한 함수들의 집합\n    getters:{\n        getCount: state => state.count,\n        getMessage: state => state.message\n    }\n}\n\nexport default practice;"],"mappings":"AAAA,SAASA,SAASA,CAAA,EAAE;EAChB,OAAM;IACF;IACAC,OAAO,EAAC;EACZ,CAAC;AACL;AAEA,MAAMC,QAAQ,GAAC;EACX;EACAC,KAAK,EAAEH,SAAS;EAChB;EACA;EACA;EACAI,SAAS,EAAE;IACPC,SAASA,CAACF,KAAK,EAAC;MACZA,KAAK,CAACG,KAAK,EAAE;IACjB,CAAC;IACDC,aAAaA,CAACJ,KAAK,EAAEK,UAAU,EAAC;MAC5BL,KAAK,CAACF,OAAO,GAAGO,UAAU;IAC9B;EAEJ,CAAC;EACDC,OAAO,EAAC;IACJ;IACA;IACAC,cAAcA,CAACC,OAAO,EAAC;MACnBA,OAAO,CAACC,MAAM,CAAC,WAAW,CAAC;IAC/B,CAAC;IACDL,aAAaA,CAACI,OAAO,EAAEH,UAAU,EAAC;MAC9BG,OAAO,CAACC,MAAM,CAAC,eAAe,EAAEJ,UAAU,CAAC;IAC/C;EACJ,CAAC;EACD;EACAK,OAAO,EAAC;IACJC,QAAQ,EAAEX,KAAK,IAAIA,KAAK,CAACG,KAAK;IAC9BS,UAAU,EAAEZ,KAAK,IAAIA,KAAK,CAACF;EAC/B;AACJ,CAAC;AAED,eAAeC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}