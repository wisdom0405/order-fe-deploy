{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, withModifiers as _withModifiers, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_card_title = _resolveComponent(\"v-card-title\");\n  const _component_v_text_field = _resolveComponent(\"v-text-field\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_form = _resolveComponent(\"v-form\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_reset_password_modal = _resolveComponent(\"reset-password-modal\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createBlock(_component_v_container, null, {\n    default: _withCtx(() => [_createVNode(_component_v_row, {\n      justify: \"center\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_col, {\n        cols: \"12\",\n        sm: \"2\",\n        md: \"4\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_card, null, {\n          default: _withCtx(() => [_createVNode(_component_v_card_title, {\n            class: \"text-h5 text-center\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(\" 로그인 \")]),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_card_text, null, {\n            default: _withCtx(() => [_createVNode(_component_v_form, {\n              onSubmit: _withModifiers($options.doLogin, [\"prevent\"])\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_text_field, {\n                label: \"email\",\n                modelValue: $data.email,\n                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.email = $event),\n                type: \"email\",\n                \"prepend-icon\": \"mdi-email\",\n                required: \"\"\n              }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_text_field, {\n                label: \"password\",\n                modelValue: $data.password,\n                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.password = $event),\n                type: \"password\",\n                \"prepend-icon\": \"mdi-lock\",\n                required: \"\"\n              }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_row, null, {\n                default: _withCtx(() => [_createVNode(_component_v_col, {\n                  cols: \"6\"\n                }, {\n                  default: _withCtx(() => [_createVNode(_component_v_btn, {\n                    color: \"red\",\n                    onClick: $options.showPasswordModel,\n                    block: \"\"\n                  }, {\n                    default: _withCtx(() => [_createTextVNode(\"비밀번호 변경\")]),\n                    _: 1 /* STABLE */\n                  }, 8 /* PROPS */, [\"onClick\"])]),\n                  _: 1 /* STABLE */\n                }), _createVNode(_component_v_col, {\n                  cols: \"6\"\n                }, {\n                  default: _withCtx(() => [_createVNode(_component_v_btn, {\n                    type: \"submit\",\n                    color: \"primary\",\n                    block: \"\"\n                  }, {\n                    default: _withCtx(() => [_createTextVNode(\"로그인\")]),\n                    _: 1 /* STABLE */\n                  })]),\n                  _: 1 /* STABLE */\n                })]),\n                _: 1 /* STABLE */\n              })]),\n              _: 1 /* STABLE */\n            }, 8 /* PROPS */, [\"onSubmit\"])]),\n            _: 1 /* STABLE */\n          })]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }), _createCommentVNode(\" resetPassword가 true가 될 때 해당 모달차이 보여짐 \"), _createCommentVNode(\" @update:dialog는 modal 컴포넌트가 update:dialog라는 이벤트를 발생시킬 때 실행될 이벤트 핸들러를 정의 \"), _createCommentVNode(\" $event : 자식요소 \"), _createVNode(_component_reset_password_modal, {\n      modelValue: $data.resetPassword,\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.resetPassword = $event),\n      \"onUpdate:dialog\": _cache[3] || (_cache[3] = $event => $data.resetPassword = $event)\n    }, null, 8 /* PROPS */, [\"modelValue\"])]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_v_container","default","_withCtx","_createVNode","_component_v_row","justify","_component_v_col","cols","sm","md","_component_v_card","_component_v_card_title","class","_createTextVNode","_","_component_v_card_text","_component_v_form","onSubmit","_withModifiers","$options","doLogin","_component_v_text_field","label","modelValue","$data","email","_cache","$event","type","required","password","_component_v_btn","color","onClick","showPasswordModel","block","_createCommentVNode","_component_reset_password_modal","resetPassword"],"sources":["/Users/wisdom/Documents/GitHub/order-frontend/src/views/LoginPage.vue"],"sourcesContent":["<template>\n    <v-container>\n        <v-row justify=\"center\">\n            <v-col cols=\"12\" sm=\"2\" md=\"4\">\n                <v-card>\n                    <v-card-title class=\"text-h5 text-center\">\n                        로그인\n                    </v-card-title>\n                    <v-card-text>\n                        <v-form @submit.prevent=\"doLogin\">\n                            <v-text-field\n                                label=\"email\"\n                                v-model=\"email\"\n                                type=\"email\"\n                                prepend-icon=\"mdi-email\"\n                                required\n                            >\n                            </v-text-field>\n\n                            <v-text-field\n                                label=\"password\"\n                                v-model=\"password\"\n                                type=\"password\"\n                                prepend-icon=\"mdi-lock\"\n                                required\n                            > \n                            </v-text-field>\n                            <v-row>\n                                <v-col cols=\"6\">\n                                    <v-btn color=\"red\" @click=\"showPasswordModel\" block>비밀번호 변경</v-btn>\n                                </v-col>\n                                <v-col cols=\"6\">\n                                    <v-btn type=\"submit\" color=\"primary\" block>로그인</v-btn>\n                                </v-col>\n                                \n                            </v-row>\n                        </v-form>\n                    </v-card-text>\n                </v-card>\n            </v-col>\n        </v-row>\n        <!-- resetPassword가 true가 될 때 해당 모달차이 보여짐 -->\n        <!-- @update:dialog는 modal 컴포넌트가 update:dialog라는 이벤트를 발생시킬 때 실행될 이벤트 핸들러를 정의 -->\n         <!-- $event : 자식요소 -->\n        <reset-password-modal\n            v-model=\"resetPassword\"\n            @update:dialog=\"resetPassword = $event\"\n        >\n\n        </reset-password-modal>\n    </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\nimport {jwtDecode} from 'jwt-decode';\nimport ResetPasswordModal from './ResetPasswordModal.vue';\n\nexport default {\n  components: { ResetPasswordModal },\n    data(){\n        return{\n            email:\"\",\n            password:\"\",\n            resetPassword:true\n        }\n    },\n    methods:{\n        async doLogin(){\n            // try-catch로 묶어서 login 성공 시 token을 console.log로 출력\n            try{\n                const loginData = {\n                    email: this.email,\n                    password: this.password\n                }\n                const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/doLogin`, loginData);\n                // local storage 라는 브라우저의 특정 공간에 서버로부터 받아온 토큰값 저장\n                const token = response.data.result.token;\n                const refreshToken = response.data.result.refreshToken;\n                console.log(jwtDecode(token));\n                const role = jwtDecode(token).role;\n\n                localStorage.setItem('token',token); // key-value 형태로 저장\n                localStorage.setItem('refreshToken',refreshToken);\n                localStorage.setItem('role', role); // jwt decoder 툴을 이용해서 페이로드 parsing\n                // this.$router.push(\"/\"); \n                window.location.href = \"/\";   \n            }catch(e){\n                const error_message = e.response.data.error_message;\n                console.log(error_message);\n                alert(error_message);\n            }\n        }, \n        showPasswordModel(){\n            this.resetPassword = true;\n        }\n    }\n}\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}