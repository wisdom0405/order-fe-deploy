{"ast":null,"code":"import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport ResetPasswordModal from './ResetPasswordModal.vue';\nexport default {\n  data() {\n    return {\n      email: \"\",\n      password: \"\"\n    };\n  },\n  methods: {\n    async doLogin() {\n      // try-catch로 묶어서 login 성공 시 token을 console.log로 출력\n      try {\n        const loginData = {\n          email: this.email,\n          password: this.password\n        };\n        const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/doLogin`, loginData);\n        // local storage 라는 브라우저의 특정 공간에 서버로부터 받아온 토큰값 저장\n        const token = response.data.result.token;\n        const refreshToken = response.data.result.refreshToken;\n        console.log(jwtDecode(token));\n        const role = jwtDecode(token).role;\n        localStorage.setItem('token', token); // key-value 형태로 저장\n        localStorage.setItem('refreshToken', refreshToken);\n        localStorage.setItem('role', role); // jwt decoder 툴을 이용해서 페이로드 parsing\n        // this.$router.push(\"/\"); \n        window.location.href = \"/\";\n      } catch (e) {\n        const error_message = e.response.data.error_message;\n        console.log(error_message);\n        alert(error_message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","jwtDecode","ResetPasswordModal","data","email","password","methods","doLogin","loginData","response","post","process","env","VUE_APP_API_BASE_URL","token","result","refreshToken","console","log","role","localStorage","setItem","window","location","href","e","error_message","alert"],"sources":["/Users/wisdom/Documents/GitHub/order-frontend/src/views/LoginPage.vue"],"sourcesContent":["<template>\n    <v-container>\n        <v-row justify=\"center\">\n            <v-col cols=\"12\" sm=\"2\" md=\"4\">\n                <v-card>\n                    <v-card-title class=\"text-h5 text-center\">\n                        로그인\n                    </v-card-title>\n                    <v-card-text>\n                        <v-form @submit.prevent=\"doLogin\">\n                            <v-text-field\n                                label=\"email\"\n                                v-model=\"email\"\n                                type=\"email\"\n                                prepend-icon=\"mdi-email\"\n                                required\n                            >\n                            </v-text-field>\n\n                            <v-text-field\n                                label=\"password\"\n                                v-model=\"password\"\n                                type=\"password\"\n                                prepend-icon=\"mdi-lock\"\n                                required\n                            > \n                            </v-text-field>\n                            <v-row>\n                                <v-col cols=\"6\">\n                                    <v-btn color=\"red\" block>비밀번호 변경</v-btn>\n                                </v-col>\n                                <v-col cols=\"6\">\n                                    <v-btn type=\"submit\" color=\"primary\" block>로그인</v-btn>\n                                </v-col>\n                                \n                            </v-row>\n                        </v-form>\n                    </v-card-text>\n                </v-card>\n            </v-col>\n        </v-row>\n        <ResetPasswordModal>\n            v-model=\"\"\n        </ResetPasswordModal>\n    </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\nimport {jwtDecode} from 'jwt-decode';\nimport ResetPasswordModal from './ResetPasswordModal.vue';\n\nexport default {\n    data(){\n        return{\n            email:\"\",\n            password:\"\"\n        }\n    },\n    methods:{\n        async doLogin(){\n            // try-catch로 묶어서 login 성공 시 token을 console.log로 출력\n            try{\n                const loginData = {\n                    email: this.email,\n                    password: this.password\n                }\n                const response = await axios.post(`${process.env.VUE_APP_API_BASE_URL}/doLogin`, loginData);\n                // local storage 라는 브라우저의 특정 공간에 서버로부터 받아온 토큰값 저장\n                const token = response.data.result.token;\n                const refreshToken = response.data.result.refreshToken;\n                console.log(jwtDecode(token));\n                const role = jwtDecode(token).role;\n\n                localStorage.setItem('token',token); // key-value 형태로 저장\n                localStorage.setItem('refreshToken',refreshToken);\n                localStorage.setItem('role', role); // jwt decoder 툴을 이용해서 페이로드 parsing\n                // this.$router.push(\"/\"); \n                window.location.href = \"/\";   \n            }catch(e){\n                const error_message = e.response.data.error_message;\n                console.log(error_message);\n                alert(error_message);\n            }\n        }  \n    }\n}\n</script>\n"],"mappings":"AAgDA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAAQC,SAAS,QAAO,YAAY;AACpC,OAAOC,kBAAiB,MAAO,0BAA0B;AAEzD,eAAe;EACXC,IAAIA,CAAA,EAAE;IACF,OAAM;MACFC,KAAK,EAAC,EAAE;MACRC,QAAQ,EAAC;IACb;EACJ,CAAC;EACDC,OAAO,EAAC;IACJ,MAAMC,OAAOA,CAAA,EAAE;MACX;MACA,IAAG;QACC,MAAMC,SAAQ,GAAI;UACdJ,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,QAAQ,EAAE,IAAI,CAACA;QACnB;QACA,MAAMI,QAAO,GAAI,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,UAAU,EAAEL,SAAS,CAAC;QAC3F;QACA,MAAMM,KAAI,GAAIL,QAAQ,CAACN,IAAI,CAACY,MAAM,CAACD,KAAK;QACxC,MAAME,YAAW,GAAIP,QAAQ,CAACN,IAAI,CAACY,MAAM,CAACC,YAAY;QACtDC,OAAO,CAACC,GAAG,CAACjB,SAAS,CAACa,KAAK,CAAC,CAAC;QAC7B,MAAMK,IAAG,GAAIlB,SAAS,CAACa,KAAK,CAAC,CAACK,IAAI;QAElCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAACP,KAAK,CAAC,EAAE;QACrCM,YAAY,CAACC,OAAO,CAAC,cAAc,EAACL,YAAY,CAAC;QACjDI,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEF,IAAI,CAAC,EAAE;QACpC;QACAG,MAAM,CAACC,QAAQ,CAACC,IAAG,GAAI,GAAG;MAC9B,CAAC,QAAMC,CAAC,EAAC;QACL,MAAMC,aAAY,GAAID,CAAC,CAAChB,QAAQ,CAACN,IAAI,CAACuB,aAAa;QACnDT,OAAO,CAACC,GAAG,CAACQ,aAAa,CAAC;QAC1BC,KAAK,CAACD,aAAa,CAAC;MACxB;IACJ;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}